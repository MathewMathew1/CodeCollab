generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Example {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?  @db.Text
    access_token      String?  @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?  @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String              @id @default(cuid())
  name               String
  username           String?             @unique
  email              String?             @unique
  emailVerified      DateTime?
  image              String?
  createdAt          DateTime            @default(now())
  accounts           Account[]
  projects           Project[]
  projectPermissions ProjectPermission[]
  sessions           Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id                 Int                 @id @default(autoincrement())
  name               String
  description        String?
  isPrivate          Boolean
  authorId           String
  files              File[]
  folders            Folder[]
  author             User                @relation(fields: [authorId], references: [id])
  projectPermissions ProjectPermission[]
}

model Folder {
  id           Int      @id @default(autoincrement())
  name         String
  projectId    Int
  parentId     Int?
  files        File[]
  parentFolder Folder?  @relation("ChildFolders", fields: [parentId], references: [id], onDelete: Cascade)
  childFolders Folder[] @relation("ChildFolders")
  project      Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([name, parentId, projectId])
}

model File {
  id        Int     @id @default(autoincrement())
  name      String
  content   String
  projectId Int
  folderId  Int?
  folder    Folder? @relation(fields: [folderId], references: [id], onDelete: Cascade)
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([name, folderId, projectId])
}

model ProjectPermission {
  id        Int     @id @default(autoincrement())
  projectId Int
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  project   Project @relation(fields: [projectId], references: [id])

  @@unique([projectId, userId])
}
